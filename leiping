
package com.dobe.pool;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import javax.sql.DataSource;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidPooledConnection;

public class AccMateData {
	
	private static DruidDataSource dataSource=null;
	//mysql配置
//	private static String driver = "com.mysql.jdbc.Driver";
//	private static String url = "jdbc:mysql://localhost:3306/test?autoReconnect=true&autoReconnectForPools=true&useUnicode=true&characterEncoding=UTF-8";
//	private static String username = "root";
//	private static String password = "root";
	//oracle 数据库配置
	private static String driver = "oracle.jdbc.OracleDriver";
	private static String url = "jdbc:oracle:thin:@localhost:1521:orcl";
	private static String username = "scott";
	private static String password = "tiger";

	
	
	class LoanData implements Callable<Long>{
		
		private int startNum;
		private int endNum;
		
		
		public LoanData(int startNum, int endNum) {
			super();
			this.startNum = startNum;
			this.endNum = endNum;
		}
	
		@Override
		public Long call() throws Exception {
//			String sqls = getSqlStr();
			String sql = "INSERT INTO `dbtest` ( `name`) VALUES ( '测试') ;";
			long startTime = System.currentTimeMillis();
			for(int i= startNum;i<endNum;i++){
				try {
					DruidPooledConnection connection = getConnection();
					PreparedStatement prepareStatement = connection.prepareStatement(sql);
					prepareStatement.execute();
					prepareStatement.close();
					connection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
//				System.out.println(Thread.currentThread().getName() + "  " + i);
			}
			long time = System.currentTimeMillis() - startTime;
			System.out.println(Thread.currentThread().getName() +"总共执行时间" +time +"毫秒");
			return time;
		}
		
		

//		@Override
//		public void run() {
			//读取sql文件并执行sql
//			String sqls = getSqlStr();
//			String sql = "INSERT INTO `dbtest` ( `name`) VALUES ( '测试') ;";
//			long startTime = System.currentTimeMillis();
//			for(int i= startNum;i<endNum;i++){
//				try {
//					DruidPooledConnection connection = getConnection();
//					PreparedStatement prepareStatement = connection.prepareStatement(sql);
//					prepareStatement.execute();
//					prepareStatement.close();
//					connection.close();
//				} catch (SQLException e) {
//					e.printStackTrace();
//				}
////				System.out.println(Thread.currentThread().getName() + "  " + i);
//			}
//			long time = System.currentTimeMillis() - startTime;
//			System.out.println(Thread.currentThread().getName() +"总共执行时间" +time +"毫秒");
//			
//		}
		
		private String getSqlStr(){
			File file = new File("这里写文件地址");
			StringReader sr = new StringReader("");
			StringBuffer sb = new StringBuffer("");
			try {
				byte[] arr = new byte[2048];
				FileInputStream fis = new FileInputStream(file);
			        int len = -1;  
			        while((len = fis.read(arr)) != -1){  
			            String str = new String(arr,0,len);  
			            System.out.println(str);  
			            sb.append(str);
			        }  
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
			return sb.toString();
		}






		
	}
	
	private DruidPooledConnection getConnection() throws SQLException{
		 DruidPooledConnection connection = dataSource.getConnection();
		return connection;
	}
	
	
	private static void getDruidDataSource(){
		dataSource = new DruidDataSource();
		dataSource.setDriverClassName(driver);
		dataSource.setUrl(url);
		dataSource.setUsername(username);
		dataSource.setPassword(password);
		dataSource.setMaxWaitThreadCount(40);
		dataSource.setMaxActive(40);
	}
	
	
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		int allData = 1000000; 
		int pageSize = 10000;
		getDruidDataSource();
		int threadSize = (allData&pageSize) == 0 ? (allData/pageSize):(allData / pageSize)+ 1 ;
		System.out.println(threadSize + "个线程数量");
		ExecutorService executorService = Executors.newFixedThreadPool(40);
		int startData;
		int endData;
		List<Future<Long>> list = new ArrayList<Future<Long>>();
		long startTime = System.currentTimeMillis();
		for(int i=0;i<threadSize;i++){
			startData = i*pageSize;
			endData = (i+1)*pageSize;
			if(endData > allData){
				endData = allData;
			}
			System.out.println("开始:"+startData+",结束"+endData);
			LoanData loanData = new AccMateData().new LoanData(startData,endData);
			Future<Long> submit = executorService.submit(loanData);
			list.add(submit);
		}
		Long sum = 0l;
		for(Future<Long> future:list){
			Long time =  future.get();
			sum+=time;
		}
		long endTime = System.currentTimeMillis() - startTime;
		System.out.println("执行总时间："+endTime);
		executorService.shutdown();
 	}
	
}
